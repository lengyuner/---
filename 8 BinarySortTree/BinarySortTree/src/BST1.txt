#include "BST.h"

/*
Args:
* root: The root pointer of the BST
   arr: The pointer to a integer array
   len: The length of the data, which needs to be stored in BST

Description:
* Create an BST with arr whose length is len
*/
void CreateBST(BST_P *root, int *arr, int len)
{
	printf("k=%d\n", K_20190612);
	K_20190612++;
	BST_P tree;
	int m, j;
	m = len / 2;
	tree = (BST_P)malloc(sizeof(BST_T));
	// typedef struct BST_Node	
	// BST_T, *BST_P;
	// PQueue q;
	// q = (PQueue)malloc(sizeof(Queue));
	
	
	if (tree == NULL)
	{
		printf("Creat Fail.\n");
		return NULL;
	}
	root = tree;
	tree->data = arr[m];
	tree->lchild = tree->rchild = NULL;
	
	j = 2 * m;
	if (j <= len && arr[j] != '0')
	{
		CreateBST(tree->lchild, arr, len);
	}
	else
	{
		tree->lchild = NULL;
	}
	
	j = 2 * m + 1;
	if (j <= len && arr[j] != '0')
	{
		CreateBST(tree->rchild, arr, len);
	}
	else
	{
		tree->rchild = NULL;
	}


	//for (int i = 0; i < len; i++)
	//	InsertBSTNode(root, arr[i]);
}



/*
Args:
* root: The root pointer of the BST

Description:
* Destroy root BST, free all the memory of root BST
*/
void DestoryBST(BST_P *root)
{

}


/*
Args:
* root: The root pointer of the BST
  data: The data you want to insert into BST

Description:
* Insert data into the root BST,return true.
* ATTENTION: If data already exist in BST, DO NOTIHNG and return false.
*/
bool InsertBSTNode(BST_P *root, DataType data)
{

	BST_P tree;
	tree = root;
	if (tree == NULL)
	{
		//t = new BST_P();
		tree = (BST_P)malloc(sizeof(BST_P));
		tree->lchild = tree->rchild = NULL;
		tree->data = data;
		return true;
	}

	if (data < tree->data)
		tree->lchild = InsertBSTNode(tree->lchild, data);
	else if (data > tree->data)
		tree->rchild = InsertBSTNode(tree->rchild, data);
	else
		return false;
	return true;
	
	
}


/*
Args:
* root: The root pointer of the BST
  data: The data you want to delete from BST

Description:
* Delete data from the root BST, and free the memory
* ATTENTION: If data doesn't exist in BST, DO NOTIHNG and return false.
*/
bool DeleteBSTNode(BST_P *root, DataType data)
{

}

/*
Args:
* root: The root pointer of the BST
  data: The data you want to search

Description:
* Search data within the root BST, and return its BST pointer
* ATTENTION: If data doesn't exist in BST, return NULL.
*/
BST_P SearchBST(BST_P *root, DataType data)
{

}



/*
Args:
* root: The root pointer of the BST

Description:
* visualize the MidOrderTraverse of root BST
*/
void MidOrderTraverse(BST_P root)
{
	if (root!=NULL)
	{
		MidOrderTraverse(root->lchild);
		printf("%d, ", root->data);
		MidOrderTraverse(root->rchild); 
	}
}

